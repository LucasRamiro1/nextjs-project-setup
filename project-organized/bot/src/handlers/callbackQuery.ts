// src/bot/handlers/callbackQuery.ts
import { mainKeyboard, backToMainButton } from '../keyboards/mainMenu.js';
import { rankingKeyboard, positionKeyboard } from '../keyboards/ranking.js';
import { platformsKeyboard, reportPlatformsKeyboard } from '../keyboards/platforms.js';
import { providersKeyboard, pgsoftGamesKeyboard, pragmaticGamesKeyboard } from '../keyboards/providers.js';
import { navigationManager } from '../utils/navigation.js';
import { conversationManager } from './conversation.js';
import { handleAnalysisSelection } from '../commands/analysis.js';
import { handleReportFlow } from '../commands/report.js';
import { handleRankingFlow } from '../commands/ranking.js';
import { handlePointsFlow } from '../commands/points.js';
import { handleHistoryFlow } from '../commands/history.js';
import { groupVerificationService } from '../services/groupVerification.js';

export const handleCallbackQuery = async (ctx: any) => {
  try {
    const callbackData = ctx.callbackQuery.data;
    const session = ctx.session;

    // Confirmar recebimento do callback
    await ctx.answerCbQuery();

    console.log(`üì≤ Callback recebido: ${callbackData} de ${ctx.from.id}`);

    // Roteamento principal
    switch (true) {
      // Navega√ß√£o principal
      case callbackData === 'back_main':
        return await handleBackToMain(ctx);
      
      case callbackData === 'back':
        return await handleBack(ctx);
      
      // Verifica√ß√£o de grupo
      case callbackData === 'verify_group':
        return await handleGroupVerification(ctx);
      
      // Menus principais
      case callbackData === 'menu_analyses':
        return await handleAnalysesMenu(ctx);
      
      case callbackData === 'menu_platforms':
        return await handlePlatformsMenu(ctx);
      
      case callbackData === 'menu_report':
        return await handleReportMenu(ctx);
      
      case callbackData === 'menu_points':
        return await handlePointsFlow(ctx);
      
      case callbackData === 'menu_ranking':
        return await handleRankingFlow(ctx);
      
      case callbackData === 'menu_history':
        return await handleHistoryFlow(ctx);
      
      // An√°lises
      case callbackData === 'analysis_individual':
        return await handleAnalysisSelection(ctx, 'individual');
      
      case callbackData === 'analysis_group':
        return await handleAnalysisSelection(ctx, 'group');
      
      // Ranking
      case callbackData.startsWith('ranking_'):
        return await handleRankingFlow(ctx, callbackData);
      
      case callbackData.startsWith('position_'):
        return await handleRankingFlow(ctx, callbackData);
      
      // Reports
      case callbackData.startsWith('platform_'):
        return await handleReportFlow(ctx, callbackData);
      
      case callbackData.startsWith('provider_'):
        return await handleReportFlow(ctx, callbackData);
      
      case callbackData.startsWith('game_'):
        return await handleReportFlow(ctx, callbackData);
      
      case callbackData.startsWith('result_'):
        return await handleReportFlow(ctx, callbackData);
      
      // Confirma√ß√µes
      case callbackData.startsWith('confirm_'):
        return await handleConfirmation(ctx, callbackData);
      
      case callbackData.startsWith('cancel_'):
        return await handleCancellation(ctx, callbackData);
      
      default:
        console.warn(`‚ö†Ô∏è Callback n√£o reconhecido: ${callbackData}`);
        await ctx.reply('‚ùì A√ß√£o n√£o reconhecida. Retornando ao menu principal.');
        return await handleBackToMain(ctx);
    }

  } catch (error) {
    console.error('‚ùå Erro ao processar callback:', error);
    await ctx.reply('‚ùå Erro ao processar sua solicita√ß√£o. Tente novamente.');
  }
};

// Voltar ao menu principal
const handleBackToMain = async (ctx: any) => {
  const session = ctx.session;
  
  // Limpar dados da sess√£o
  session.currentFlow = null;
  session.conversationData = null;
  session.reportData = {};
  session.analysisData = {};
  navigationManager.clearStack(session);

  const message = `üè† *Menu Principal*

Escolha uma das op√ß√µes abaixo:`;

  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    ...mainKeyboard
  });
};

// Voltar um n√≠vel
const handleBack = async (ctx: any) => {
  const session = ctx.session;
  const previousMenu = navigationManager.popFromStack(session);
  
  switch (previousMenu) {
    case 'main':
      return await handleBackToMain(ctx);
    
    case 'analyses':
      return await handleAnalysesMenu(ctx);
    
    case 'platforms':
      return await handlePlatformsMenu(ctx);
    
    case 'report':
      return await handleReportMenu(ctx);
    
    case 'ranking':
      return await handleRankingFlow(ctx);
    
    default:
      return await handleBackToMain(ctx);
  }
};

// Verifica√ß√£o de grupo
const handleGroupVerification = async (ctx: any) => {
  try {
    await ctx.editMessageText('üîÑ Verificando sua participa√ß√£o no grupo...', {
      parse_mode: 'Markdown'
    });

    const isInGroup = await groupVerificationService.checkUserInGroup(
      ctx.telegram, 
      ctx.from.id
    );

    if (isInGroup) {
      await ctx.editMessageText(
        '‚úÖ *Verifica√ß√£o conclu√≠da!*\n\n' +
        'Voc√™ est√° no grupo e pode usar todas as funcionalidades do bot.\n\n' +
        'Bem-vindo(a)! Use o menu abaixo para navegar:',
        {
          parse_mode: 'Markdown',
          ...mainKeyboard
        }
      );
    } else {
      const message = groupVerificationService.getGroupRequirementMessage();
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ Verificar Novamente', callback_data: 'verify_group' }]
          ]
        }
      });
    }

  } catch (error) {
    console.error('Erro na verifica√ß√£o do grupo:', error);
    await ctx.editMessageText(
      '‚ùå Erro ao verificar grupo. Tente novamente em alguns minutos.',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ Tentar Novamente', callback_data: 'verify_group' }]
          ]
        }
      }
    );
  }
};

// Menu de an√°lises
const handleAnalysesMenu = async (ctx: any) => {
  const session = ctx.session;
  navigationManager.pushToStack(session, 'main');

  const message = `üìä *An√°lises Baseadas em Dados*

Escolha o tipo de an√°lise que deseja comprar:

üîç *Individual (25 BP)*
‚Ä¢ An√°lise personalizada s√≥ para voc√™
‚Ä¢ Recomenda√ß√µes baseadas em hor√°rios
‚Ä¢ Dados estat√≠sticos detalhados

üë• *Para Grupo (500 BP)*
‚Ä¢ An√°lise compartilhada no grupo
‚Ä¢ Beneficia toda a comunidade
‚Ä¢ Maior visibilidade e discuss√£o

üí° *Como funciona:*
‚Ä¢ Selecione plataforma e jogo
‚Ä¢ Sistema analisa dados hist√≥ricos
‚Ä¢ Recebe recomenda√ß√µes de hor√°rios

Qual tipo de an√°lise deseja?`;

  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üîç Individual (25 BP)', callback_data: 'analysis_individual' },
          { text: 'üë• Grupo (500 BP)', callback_data: 'analysis_group' }
        ],
        [
          { text: '‚¨ÖÔ∏è Voltar', callback_data: 'back' }
        ]
      ]
    }
  });
};

// Menu de plataformas
const handlePlatformsMenu = async (ctx: any) => {
  const session = ctx.session;
  navigationManager.pushToStack(session, 'main');

  const message = `üé∞ *Plataformas Parceiras*

Acesse nossas plataformas parceiras atrav√©s dos links abaixo:

üéØ *Benef√≠cios:*
‚Ä¢ Links de afiliado exclusivos
‚Ä¢ B√¥nus especiais para nossa comunidade
‚Ä¢ Suporte priorit√°rio
‚Ä¢ Cashback em apostas

üîí *Todas as plataformas s√£o verificadas e confi√°veis*

Escolha sua plataforma preferida:`;

  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    ...platformsKeyboard
  });
};

// Menu de reports
const handleReportMenu = async (ctx: any) => {
  const session = ctx.session;
  navigationManager.pushToStack(session, 'main');

  const message = `üìù *Enviar Report de Aposta*

üìã *Como funciona:*
‚Ä¢ Selecione a plataforma onde apostou
‚Ä¢ Escolha o provedor e jogo
‚Ä¢ Informe valor, resultado e hor√°rio
‚Ä¢ Envie fotos como comprova√ß√£o

üí∞ *Recompensas:*
‚Ä¢ Reports aprovados: +10 BP
‚Ä¢ Reports com fotos: +5 BP b√¥nus
‚Ä¢ Primeiro report do dia: +5 BP extra

üì∏ *Dicas para aprova√ß√£o:*
‚Ä¢ Envie prints claros da aposta
‚Ä¢ Inclua o ID da transa√ß√£o
‚Ä¢ Seja preciso com hor√°rios

Escolha a plataforma onde apostou:`;

  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    ...reportPlatformsKeyboard
  });
};

// Handler de confirma√ß√µes
const handleConfirmation = async (ctx: any, callbackData: string) => {
  const [, action, ...params] = callbackData.split('_');
  
  switch (action) {
    case 'submit':
      return await handleReportFlow(ctx, 'confirm_submit');
    
    case 'cancel':
      return await handleCancellation(ctx, `cancel_${params.join('_')}`);
    
    case 'purchase':
      return await handleAnalysisSelection(ctx, `confirm_purchase_${params.join('_')}`);
    
    default:
      await ctx.reply('‚ùì Confirma√ß√£o n√£o reconhecida.');
  }
};

// Handler de cancelamentos
const handleCancellation = async (ctx: any, callbackData: string) => {
  const session = ctx.session;
  const [, action, ...params] = callbackData.split('_');
  
  switch (action) {
    case 'report':
      // Limpar dados do report
      session.currentFlow = null;
      session.conversationData = null;
      session.reportData = {};
      conversationManager.endConversation(ctx);
      
      await ctx.editMessageText(
        '‚ùå *Report cancelado*\n\n' +
        'Todos os dados foram descartados.\n\n' +
        'Deseja fazer outra coisa?',
        {
          parse_mode: 'Markdown',
          ...backToMainButton
        }
      );
      break;
    
    case 'analysis':
      // Limpar dados da an√°lise
      session.currentFlow = null;
      session.analysisData = {};
      
      await ctx.editMessageText(
        '‚ùå *Compra cancelada*\n\n' +
        'A an√°lise n√£o foi comprada.\n\n' +
        'Deseja fazer outra coisa?',
        {
          parse_mode: 'Markdown',
          ...backToMainButton
        }
      );
      break;
    
    default:
      await ctx.reply('‚ùì Cancelamento n√£o reconhecido.');
  }
};